// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'package:equatable/equatable.dart';
import 'package:flutter/foundation.dart';

class Order extends Equatable {
  final String orderId;
  final String order;
  final String validationCode;
  final String customerName;
  final String status;
  final String pickupLocation;
  final String customerPhone;
  final String deliveryAddress;
  final String deliveryDate;
  final String deliveryMan;
  final String createdAt;
  final String updatedAt;
  final String orderRef;
  final String? address; // Make optional
  final String? id; // Make optional

  const Order({
    required this.orderId,
    required this.order,
    required this.validationCode,
    required this.customerName,
    required this.status,
    required this.pickupLocation,
    required this.customerPhone,
    required this.deliveryAddress,
    required this.deliveryDate,
    required this.deliveryMan,
    required this.createdAt,
    required this.updatedAt,
    required this.orderRef,
    this.address, // Optional
    this.id, // Optional
  });
  
  factory Order.fromJson(Map<String, dynamic> json) {
    try {
      return Order(
        orderId: _convertToString(json['_id']) ?? '',
        order: _convertToString(json['order']) ?? '',
        validationCode: _convertToString(json['validationCode']) ?? '',
        customerName: _convertToString(json['customerName']) ?? '',
        status: _convertToString(json['status']) ?? '',
        pickupLocation: _convertToString(json['pickupLocation']) ?? '',
        customerPhone: _convertToString(json['customerPhone']) ?? '',
        deliveryAddress: _convertToString(json['deliveryAddress']) ?? '',
        deliveryDate: _convertToString(json['deliveryDate']) ?? '',
        deliveryMan: _convertToString(json['deliveryMan']) ?? '',
        createdAt: _convertToString(json['createdAt']) ?? '',
        updatedAt: _convertToString(json['updatedAt']) ?? '',
        orderRef: _convertToString(json['orderRef'] ?? json['reference']) ?? '',
      );
    } catch (e) {
      // Log the error and the JSON data that caused it
      debugPrint('Error creating Order from JSON: $e');
      debugPrint(
        'Problematic JSON: ${json.toString().substring(0, json.toString().length > 300 ? 300 : json.toString().length)}',
      );

      // Return a fallback order to prevent app crashes
      return Order(
        orderId: _convertToString(json['_id']) ?? 'error',
        order: 'Error parsing order',
        validationCode: '0000',
        customerName: 'Unknown',
        status: 'unknown',
        pickupLocation: 'Unknown',
        customerPhone: '',
        deliveryAddress: '',
        deliveryDate: DateTime.now().toString(),
        deliveryMan: '',
        createdAt: DateTime.now().toString(),
        updatedAt: DateTime.now().toString(),
        orderRef: 'ERR',
      );
    }
  }
  
  // Helper method to convert any value to string with improved robustness
  static String? _convertToString(dynamic value) {
    if (value == null) return null;
    try {
      return value.toString();
    } catch (e) {
      debugPrint('Error converting value to string: $e');
      return null;
    }
  }

  factory Order.fromJson1(Map<String, dynamic> json) {
    try {
      final deliveryOrderJson = json['deliveryOrder'];
      if (deliveryOrderJson == null) {
        throw Exception('Missing deliveryOrder in JSON');
      }

      return Order(
        orderId: _convertToString(deliveryOrderJson['_id']) ?? '',
        order: _convertToString(deliveryOrderJson['order']) ?? '',
        validationCode: _convertToString(deliveryOrderJson['validationCode']) ?? '',
        customerName: _convertToString(deliveryOrderJson['customerName']) ?? '',
        status: _convertToString(deliveryOrderJson['status']) ?? '',
        pickupLocation: _convertToString(deliveryOrderJson['pickupLocation']) ?? '',
        customerPhone: _convertToString(deliveryOrderJson['customerPhone']) ?? '',
        deliveryAddress: _convertToString(deliveryOrderJson['deliveryAddress']) ?? '',
        deliveryDate: _convertToString(deliveryOrderJson['deliveryDate']) ?? '',
        deliveryMan: _convertToString(deliveryOrderJson['deliveryMan']) ?? '',
        createdAt: _convertToString(deliveryOrderJson['createdAt']) ?? '',
        updatedAt: _convertToString(deliveryOrderJson['updatedAt']) ?? '',
        orderRef: _convertToString(deliveryOrderJson['orderRef'] ?? deliveryOrderJson['reference']) ?? '',
      );
    } catch (e) {
      debugPrint('Error creating Order from deliveryOrder JSON: $e');
      debugPrint(
        'Problematic JSON: ${json.toString().substring(0, json.toString().length > 300 ? 300 : json.toString().length)}',
      );

      // Return a fallback order to prevent app crashes
      return Order(
        orderId: 'error',
        order: 'Error parsing order',
        validationCode: '0000',
        customerName: 'Unknown',
        status: 'unknown',
        pickupLocation: 'Unknown',
        customerPhone: '',
        deliveryAddress: '',
        deliveryDate: DateTime.now().toString(),
        deliveryMan: '',
        createdAt: DateTime.now().toString(),
        updatedAt: DateTime.now().toString(),
        orderRef: 'ERR',
      );
    }
  }

  @override
  List<Object?> get props => [
    orderId,
    order,
    validationCode,
    customerName,
    status,
    pickupLocation,
    customerPhone,
    deliveryAddress,
    deliveryDate,
    deliveryMan,
    createdAt,
    updatedAt,
  ];

  Order copyWith({
    String? orderId,
    String? orderRef,
    String? order,
    String? validationCode,
    String? customerName,
    String? status,
    String? pickupLocation,
    String? customerPhone,
    String? deliveryAddress,
    String? deliveryDate,
    String? deliveryMan,
    String? createdAt,
    String? updatedAt,
  }) {
    return Order(
      orderId: orderId ?? this.orderId,
      order: order ?? this.order,
      validationCode: validationCode ?? this.validationCode,
      customerName: customerName ?? this.customerName,
      status: status ?? this.status,
      pickupLocation: pickupLocation ?? this.pickupLocation,
      customerPhone: customerPhone ?? this.customerPhone,
      deliveryAddress: deliveryAddress ?? this.deliveryAddress,
      deliveryDate: deliveryDate ?? this.deliveryDate,
      deliveryMan: deliveryMan ?? this.deliveryMan,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      orderRef: orderRef ?? this.orderRef,
    );
  }
}
